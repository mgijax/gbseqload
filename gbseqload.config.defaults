#format: sh
#
#  gbseqload.config.defaults
#
#  This file sets up environment variables that are needed for the
#  GenBank Sequence load
#
#  The default values are set to process the initial Genbank Release
###########################################################################

###########################################################################
#
#  GENERAL SETTINGS
#
###########################################################################

#  Installation directory for the GenBank sequence load
INSTALLDIR=/usr/local/mgi/live/dataload/gbseqload
#INSTALLDIR=/usr/local/mgi/3.0/dataload/gbseqload

#  Installation directory for the DB utilities product
DBUTILSDIR=/usr/local/mgi/live/dbutils/mgidbutilities
#DBUTILSDIR=/usr/local/mgi/3.0/dbutils/mgidbutilities

# Installation directory for the radar dbutilites product
RADARDBUTILSDIR=/usr/local/mgi/live/dbutils/radardbutilities
#RADARDBUTILSDIR=/usr/local/mgi/3.0/dbutils/radardbutilities

#  Installation directory for the QC report product
QCRPTDIR=/usr/local/mgi/live/qcreports_db
#QCRPTDIR=/usr/local/mgi/3.0/qcreports_db

export INSTALLDIR DBUTILSDIR RADARDBUTILSDIR QCRPTDIR

###########################################################################
#
#  DATABASE SETTINGS BY DATABASE
#
###########################################################################

# MGD Connection parameters 
MGD_DBSERVER=PROD_MGI
#MGD_DBSERVER=DEV1_MGI

MGD_DBURL=shire.informatics.jax.org:4100
#MGD_DBURL=rohan.informatics.jax.org:4101

MGD_DBNAME=mgd
#MGD_DBNAME=mgd_jsamlec

MGD_DBUSER=mgd_dbo
MGD_DBPASSWORDFILE=${DBUTILSDIR}/.mgd_dbo_password

MGD_DBSCHEMADIR=/usr/local/mgi/live/dbutils/mgd/mgddbschema
#MGD_DBSCHEMADIR=/usr/local/mgi/3.0/dbutils/mgd_jsamlec/mgddbschema

export MGD_DBSERVER MGD_DBURL MGD_DBNAME
export MGD_DBUSER MGD_DBPASSWORDFILE MGD_DBSCHEMADIR

# RADAR Connection parameters 
RADAR_DBSERVER=PROD_MGI
#RADAR_DBSERVER=DEV1_MGI

RADAR_DBURL=shire.informatics.jax.org:4100
#RADAR_DBURL=rohan.informatics.jax.org:4101

RADAR_DBNAME=radar
#RADAR_DBNAME=radar_jsam

RADAR_DBUSER=mgd_dbo
RADAR_DBPASSWORDFILE=${DBUTILSDIR}/.mgd_dbo_password

RADAR_DBSCHEMADIR=/usr/local/mgi/live/dbutils/radar/radardbschema
#RADAR_DBSCHEMADIR=/usr/local/mgi/3.0/dbutils/radar_jsam/radardbschema

export RADAR_DBSERVER RADAR_DBURL RADAR_DBNAME RADAR_DBUSER 
export RADAR_DBPASSWORDFILE RADAR_DBSCHEMADIR 

###########################################################################
#
#  SOFTWARE SETTINGS
#
###########################################################################

JAVA_HOME=/usr/j2se
JAVA_RUN=${JAVA_HOME}/bin/java

# allow 1.5 initial and max heap memory - note this is the max for which
# the loader will run since child processes (e.g. isql exec of sql files)
# need memory from the parent process (2G max given to a process by the op sys)
JAVARUNTIMEOPTS="-Xms2G -Xmx2G"
#JAVARUNTIMEOPTS="-Xms1500m -Xmx1500m"

JAVA_LIB=/usr/local/mgi/live/lib/java1.4/lib_java_dla/dla.jar:/usr/local/mgi/live/lib/java1.4/lib_java_core/core.jar:/usr/local/mgi/live/lib/java1.4/lib_java_dbsmgd/dbsmgd.jar:/usr/local/mgi/live/lib/java1.4/lib_java_dbsrdr/dbsrdr.jar

#JAVA_LIB=/usr/local/mgi/3.0/lib/java1.4/lib_java_dla/dla.jar:/usr/local/mgi/3.0/lib/java1.4/lib_java_core/core.jar:/usr/local/mgi/3.0/lib/java1.4/lib_java_dbsmgd/dbsmgd.jar:/usr/local/mgi/3.0/lib/java1.4/lib_java_dbsrdr/dbsrdr.jar

CLASSPATH=.:${INSTALLDIR}/gbseqload.jar:${JAVA_LIB}:${COMMON_CLASSPATH}

export JAVA_HOME JAVA_RUN JAVA_LIB JAVARUNTIMEOPTS CLASSPATH

DLAFUNCTIONS=${RADARDBUTILSDIR}/bin/DLAfunctions.sh

JOBSTART_CSH=${RADARDBUTILSDIR}/bin/startJobStream.csh
JOBEND_CSH=${RADARDBUTILSDIR}/bin/endJobStream.csh

export DLAFUNCTIONS JOBSTART_CSH JOBEND_CSH

###########################################################################
#
#  LOAD SPECIFIC SETTINGS
#
###########################################################################

#  Java applications
SEQLOAD_APP=org.jax.mgi.app.gbseqloader.GBSeqloader

# seqloader QC report script
SEQLOAD_QCRPT=${QCRPTDIR}/seqload/runQC.csh

# molecular source processor QC report script
MSP_QCRPT=${QCRPTDIR}/msp/runQC.csh

export SEQLOAD_APP SEQLOAD_QCRPT MSP_QCRPT

#  loader shell script
SEQLOAD_SH=${INSTALLDIR}/bin/gbseqload.sh

export SEQLOAD_SH

#  Full path to dir containing the data, report, log and archive directories
FILEDIR=/data/loads/genbank/gbseqload
#FILEDIR=/net/mtdoom/vol/rohan/data/loads/genbank/gbseqload

# Full path to dir containing GenBank release input files - 
# Note we are using the seqdb_engine release build files
# if LOAD_MODE=incremental the jobstream determines its own input directory
DATADIR=/data/seqdbs/blast/gb.build
#DATADIR=/net/hobbiton/data/seqdbs/blast/gb.build

# Full path the the logs, reports, and archive directories
LOGDIR=${FILEDIR}/logs
RPTDIR=${FILEDIR}/reports
ARCHIVEDIR=${FILEDIR}/archive

export FILEDIR DATADIR LOGDIR RPTDIR ARCHIVEDIR

#  Complete path name of the GenBank input file(s)
#  Frameworks expects the value 'STDIN' if jobstream script pipes input to
#  the application. Jobstream script expects PIPED_INFILE to be defined
#  if INFILE_NAME=STDIN
INFILE_NAME=STDIN

# full path to the GenBank release input files
# Note: we are using the seqdb_engine release build files
# Note: if LOAD_MODE=incremental and RADAR_NONCUM_INPUT=true 
# the jobstream determines its own input files
PIPED_INFILES="${DATADIR}/gbrod_mouse.seq ${DATADIR}/gbsts_sts_mouse.seq ${DATADIR}/gbpat_mouse.seq ${DATADIR}/gbhtc_mouse_mrna.seq ${DATADIR}/gbhtg_mouse.seq ${DATADIR}/gbest_mouse.seq ${DATADIR}/gbgss_mouse.seq"

# the seqdb_engine release input files are not compressed, the non-cums are
#CAT_METHOD="/usr/local/bin/gunzip -c"
CAT_METHOD=/usr/bin/cat

export INFILE_NAME PIPED_INFILES CAT_METHOD 

# true = regex matching for finding record delim is turned on
INFILE_USE_REGEX=false

# GenBank sequence record regex begin and end delimiter
#INFILE_BEGIN_DELIMITER="^LOCUS"
#INFILE_END_DELIMITER="^ORIGIN"

# GenBank sequence record String begin and end delimiter
# GenBank sequence record String end delimiter not including sequence
INFILE_END_DELIMITER=\nORIGIN

# GenBank sequence record String start delimiter
# there 7 spaces after LOCUS
INFILE_BEGIN_DELIMITER="LOCUS       "

export INFILE_BEGIN_DELIMITER INFILE_END_DELIMITER INFILE_USE_REGEX

# buffersize in bytes used by nio.ByteBuffer
# 21,000,000 = ~20 MB
INFILE_BUFFERSIZE=21000000

# incremental, incremental_initial, or delete_reload
# incremental_initial uses no event detections - add only
SEQ_LOAD_MODE=incremental_initial

# get non-cum input files from RADAR if 'true' and SEQ_LOAD_MODE=
# incremental
RADAR_NONCUM_INPUT=false

# max size of a set of non-cums to process in bytes -
# 50MB compressed seems to be good
NONCUM_MAX=50000000

export INFILE_BUFFERSIZE SEQ_LOAD_MODE NONCUM_MAX RADAR_NONCUM_INPUT

# true if a virtual (computationally derived) sequence
SEQ_VIRTUAL=false

# this load's MGI_User login value for DB tables CreatedBy and ModifiedBy column
JOBSTREAM=genbank_load

# SEQ_Sequence Provider controlled vocab for GenBank 
SEQ_PROVIDER=GenBank

# logical db name for this data provider
SEQ_LOGICALDB="Sequence DB"

export SEQ_VIRTUAL JOBSTREAM SEQ_PROVIDER SEQ_LOGICALDB

# organisms to load
LOAD_MOUSE=true
LOAD_RAT=false
LOAD_HUMAN=false

export LOAD_MOUSE LOAD_RAT LOAD_HUMAN

#  Complete path name of the log files
LOG_PROC=${LOGDIR}/gbseqload.proc.log
LOG_DIAG=${LOGDIR}/gbseqload.diag.log
LOG_CUR=${LOGDIR}/gbseqload.cur.log
LOG_VAL=${LOGDIR}/gbseqload.val.log

# Send debug messages to the diagnostic log
LOG_DEBUG=false

export LOG_PROC LOG_DIAG LOG_CUR LOG_VAL LOG_DEBUG


###########################################################################
#
#  BCP MANAGER SETTINGS BY DATABASE
#
###########################################################################

#  Settings used to create a BCP manager for the MGD database
MGD_BCP_PATH=${FILEDIR}/data
MGD_BCP_PREVENT_EXECUTE=false
MGD_BCP_TRUNCATE_LOG=true
MGD_BCP_DROP_INDEXES=true
MGD_BCP_RECORD_STAMPING=false
MGD_BCP_AUTO_FLUSH=false
MGD_BCP_OK_TO_OVERWRITE=false

export MGD_BCP_PATH MGD_BCP_PREVENT_EXECUTE MGD_BCP_TRUNCATE_LOG
export MGD_BCP_DROP_INDEXES MGD_BCP_RECORD_STAMPING MGD_BCP_AUTO_FLUSH
export MGD_BCP_OK_TO_OVERWRITE

#  Settings used to create a BCP manager for the RADAR database
RADAR_BCP_PATH=${FILEDIR}/data
RADAR_BCP_PREVENT_EXECUTE=false
RADAR_BCP_TRUNCATE_LOG=true
RADAR_BCP_DROP_INDEXES=true
RADAR_BCP_RECORD_STAMPING=false
RADAR_BCP_AUTO_FLUSH=true
RADAR_BCP_OK_TO_OVERWRITE=false

export RADAR_BCP_PATH RADAR_BCP_PREVENT_EXECUTE RADAR_BCP_TRUNCATE_LOG
export RADAR_BCP_DROP_INDEXES RADAR_BCP_RECORD_STAMPING RADAR_BCP_AUTO_FLUSH
export RADAR_BCP_OK_TO_OVERWRITE

###########################################################################
#
#  SQL SCRIPTWRITER SETTINGS FOR updates
#
###########################################################################

# setting used to create a ScriptWriter for the MGD database
MGD_SCP_PATH=${MGD_BCP_PATH}
MGD_SCP_PREVENT_EXECUTE=false
MGD_SCP_OK_TO_OVERWRITE=false
MGD_SCP_FILENAME=updates

# Use defaults
#MGD_SCP_SUFFIX=
#MGD_SCP_OUTFILENAME=
#MGD_SCP_OUTSUFFIX=

export MGD_SCP_PATH MGD_SCP_PREVENT_EXECUTE MGD_SCP_OK_TO_OVERWRITE
export MGD_SCP_FILENAME 
#export MGD_SCP_SUFFIX MGD_SCP_OUTFILENAME MGD_SCP_OUTSUFFIX

###########################################################################
#
#  SQL SCRIPTWRITER SETTINGS FOR Merges and Splits
#
###########################################################################

# setting used to create a ScriptWriter for the merges and split
SCP_PATH=${MGD_BCP_PATH}
SCP_PREVENT_EXECUTE=false
SCP_OK_TO_OVERWRITE=false
SCP_FILENAME=mergeSplits

# Use defaults
#SCP_SUFFIX=
#SCP_OUTFILENAME=
#SCP_OUTSUFFIX=

export SCP_PATH SCP_PREVENT_EXECUTE SCP_OK_TO_OVERWRITE
export SCP_FILENAME 
#export SCP_SUFFIX SCP_OUTFILENAME SCP_OUTSUFFIX


###########################################################################
#
#  MISCELLANEOUS SETTINGS
#
###########################################################################

#  Recipient list for mailing the log files (comma-separated)
MAIL_LOG_PROC="sc"
MAIL_LOG_CUR=""

export MAIL_LOG_PROC MAIL_LOG_CUR

##################################################################
# repeat file processing used when in incremental mode
##################################################################

# process repeat file if true
PROCESS_REPEATS=false

# repeat file directory
REPEAT_FILEDIR=${FILEDIR}/data

# repeat file name
REPEAT_FILENAME=repeats.out

# full path to repeat file
SEQ_REPEAT_FILE=${REPEAT_FILEDIR}/${REPEAT_FILENAME}

# rename repeat file to this name for processing
REPEAT_TO_PROCESS=${SEQ_REPEAT_FILE}.to.process

export PROCESS_REPEATS REPEAT_FILEDIR REPEAT_FILENAME
export SEQ_REPEAT_FILE REPEAT_TO_PROCESS
